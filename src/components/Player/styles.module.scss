.playerContainer {
  padding: 3rem 4rem;
  width: 26.5rem;
  height: 100vh;
  @media (max-width: 1000px) {
    height: 60vh;
    width: 100vw;
  }
  overflow-y: scroll;

  background: var(--purple-500);
  color: var(--white);

  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;

  header {
    display: flex;
    align-items: center;
    gap: 1rem; //propriedade nova do css que faz com que todos os elementos dentro da div que você está estilizando tenha o tamanho que voce passou de espaçamento entre eles
  }

  strong {
    font-family: Lexend, sans-serif;
    font-weight: 600;
  }

  footer {
    align-self: stretch; //isso vai fazer com que ele ocupe a largura toda do footer

    &.empty {
      opacity: 0.5; // isso que dizer basicamente: Quando ele estiver com a estilização empty, vai dar um opacity: 0..5
    }
  }
}

.currentEpisode {
  text-align: center;

  img {
    border-radius: 1.5rem;

    @media (max-width: 1000) {
      max-width: 50%;
      max-height: 50%;
    }
  }

  strong {
    display: block;
    margin-top: 1rem;
    font: 600 0.9rem Lexend, sans-serif;
    line-height: 1.75rem;
  }

  span {
    display: block;
    // margin-top: 1rem;
    margin-bottom: 1rem;
    opacity: 0.6;
    font: 500 0.9rem Lexend, sans-serif;
    line-height: 1.5rem;
  }
}

.emptyPlayer {
  width: 100%;
  height: 20rem;
  border: 1.5px dashed var(--purple-300);
  border-radius: 1.5rem;
  background: linear-gradient(
    144deg,
    rgba(145, 100, 250, 0.8) 0%,
    rgba(0, 0, 0, 0) 100%
  ); //veio direto do figma, por isso esses valores esquisitos
  // gradiente server para fazer uma imagem de fundo com variação de cores passando como parâmetros as cores de inicio e fim e também a intensidade delas em porcentagem
  // o deg passado é como uma espécie de direção para esse gradiente
  padding: 4rem;
  text-align: center;

  display: flex;
  align-items: center;
  justify-content: center;
}

.progress {
  display: flex;
  align-items: center;
  gap: 1rem;
  font-size: 0.875rem;

  span {
    display: inline-block;
    width: 4rem;
    text-align: center;
  }

  .slider {
    flex: 1;

    .emptySlider {
      width: 100%;
      height: 4px;
      background: var(--purple-300);
      border-radius: 2px;
    }
  }
}

.buttons {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 1rem;
  gap: 1.5rem;

  button {
    background: transparent;
    border: 0;
    font-size: 0; // serve para centralizar a imagem que está dentro do botão

    transition: filter 0.2s;

    &.disabled {
      //caso ele esteja desabilizado = quando nao tiver podcast tocando ele aplica esse css
      cursor: default;
      opacity: 0.5;
    }

    &:hover:not(:disabled) {
      filter: brightness(0.7);
    }

    &.isActive {
      filter: invert(0.35) sepia(1) saturate(3) hue-rotate(100deg); // gambiarra para mudar a cor do botão quando ele já estar ativo já que nao temos esse manuseio de alterar imagens svg de forma direta por código
    }

    &.isActive:hover {
      filter: brightness(0.6) invert(0.35) sepia(1) saturate(3) hue-rotate(100deg); // gambiarra para mudar a cor do botão já que nao temos esse manuseio de alterar imagens svg de forma direta por código
    }

    &.playButton {
      // isso quer dizer: "Dentre os botoes, quando tiver algum com className="playButton", estilize com essas coisas..."
      width: 4rem;
      height: 4rem;
      border-radius: 1rem;
      background: var(--purple-400);

      &:hover:not(:disabled) {
        filter: brightness(0.9);
      }
    }
  }
}
